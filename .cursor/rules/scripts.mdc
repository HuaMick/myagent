---
description: 
globs: 
alwaysApply: false
---
- All scripts should be designed to be run from the project root directory.
- Prefer using `npm` scripts in `package.json` for consistency.

## package.json scripts
Your `package.json` should contain scripts for common tasks.

```json
"scripts": {
  "vscode:prepublish": "npm run compile",
  "compile": "tsc -p ./",
  "watch": "tsc -watch -p ./",
  "pretest": "npm run compile && npm run lint",
  "lint": "eslint src",
  "test": "vscode-test"
},
```

## Shell Scripts
Shell scripts can be used for more complex orchestration and should be placed in a `scripts/` directory.

### Example: Specific Test Execution (`scripts/run-integration-test.sh`)
This script compiles the project and then runs a specific subset of integration tests. This is useful when you are working on a single feature and want to avoid running the entire test suite.

```bash
#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# Ensure the project is compiled before running tests.
echo "Compiling project..."
npm run compile

# Run tests that match a specific pattern.
# Usage: ./scripts/run-integration-test.sh "My Test Suite Name"
echo "Running specific integration tests..."
npx vscode-test --grep "$1"
```

To make it executable, run: `chmod +x scripts/run-integration-test.sh`

### Example: Packaging Script (`scripts/package.sh`)
This script packages your extension into a `.vsix` file for distribution.

```bash
#!/bin/bash

# This script packages your extension into a .vsix file

# Ensure vsce (Visual Studio Code Extensions command-line tool) is installed
# npm install -g @vscode/vsce

echo "Packaging extension..."
vsce package
``` 