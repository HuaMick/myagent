---
description: creating and updating integration test or integration test shell scripts in the src/tests folder
globs: 
alwaysApply: false
---
# Integration Tests (TypeScript/Jest)

Integration tests are crucial for verifying that different parts of the application, especially functions and API-calling modules, work together correctly.

**Philosophy**: Every major feature or function that interacts with an external API should have an integration test. This validates its interaction with real (or near-real) dependencies and ensures it behaves as expected. Mocks should be used sparingly, primarily for isolating true external services that are out of scope for the current integration test if they are unavailable during testing.

## Guidelines:
- Test files should be located in `src/tests` and end with `.test.ts`.
- Use Jest as the testing framework.
- Do not use mocking for internal logic. Mocking should only be used when interacting with an external service.
- When mocking services or data create a fixture in `src/tests/fixtures`
- Decouple test implementation from test execution by using shell scripts for environment setup.

## Always
- [ ] `grep_search` for related test files.
- [ ] Check if an existing test can be updated to meet the testing objective.
- [ ] Run the integration test after creating it to make sure it works.

## Jest Test Template:
```typescript
// src/tests/example.test.ts
import { exampleFunction } from '../functions/exampleFunction';

describe('Integration Test for exampleFunction', () => {
  it('should return success for valid input', () => {
    // Execute test operation
    const result = exampleFunction('test input');

    // Print results for verification
    console.log('\nIntegration Test Results:');
    console.log(`Results: ${JSON.stringify(result, null, 2)}`);

    // Assertions to verify the results
    expect(result.success).toBe(true);
    expect(result.result).not.toBeNull();
    expect(result.result?.data).toContain('Processed');
  });

  it('should return failure for invalid input', () => {
    const result = exampleFunction('');
    expect(result.success).toBe(false);
    expect(result.message).toBe('param1 is required');
  });
});
```
To setup Jest, you would run `npm install --save-dev jest @types/jest ts-jest` and create a `jest.config.js`.



